/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp DeviceThreadFactory.xml -p DeviceThreadFactoryInterface -c DeviceThreadFactoryInterface
 *
 * dbusxml2cpp is Copyright (C) 2008 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DEVICETHREADFACTORYINTERFACE_H_1283264808
#define DEVICETHREADFACTORYINTERFACE_H_1283264808

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface it.elettra.trieste.TApplicationsInterface.deviceThreadFactory
 */
class DeviceThreadFactoryInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "it.elettra.trieste.TApplicationsInterface.deviceThreadFactory"; }

public:
    DeviceThreadFactoryInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~DeviceThreadFactoryInterface();

    Q_PROPERTY(int threadCount READ threadCount)
    inline int threadCount() const
    { return qvariant_cast< int >(internalPropGet("threadCount")); }

    Q_PROPERTY(QStringList threads READ threads)
    inline QStringList threads() const
    { return qvariant_cast< QStringList >(internalPropGet("threads")); }

public Q_SLOTS: // METHODS
Q_SIGNALS: // SIGNALS
};

namespace it {
  namespace elettra {
    namespace trieste {
      namespace TApplicationsInterface {
        typedef ::DeviceThreadFactoryInterface deviceThreadFactory;
      }
    }
  }
}
#endif
