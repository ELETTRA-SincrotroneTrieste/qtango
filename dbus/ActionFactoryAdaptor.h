/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp ActionFactory.xml -c ActionFactoryAdaptor -a ActionFactoryAdaptor
 *
 * dbusxml2cpp is Copyright (C) 2008 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef ACTIONFACTORYADAPTOR_H_1284122996
#define ACTIONFACTORYADAPTOR_H_1284122996

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;

/*
 * Adaptor class for interface it.elettra.trieste.TApplicationsInterface.actionFactory
 */
class ActionFactoryAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "it.elettra.trieste.TApplicationsInterface.actionFactory")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"it.elettra.trieste.TApplicationsInterface.actionFactory\" >\n"
"    <property direction=\"out\" access=\"read\" type=\"b\" name=\"targetExecutionLogEnabled\" />\n"
"    <property direction=\"out\" access=\"read\" type=\"as\" name=\"actionsListAsXml\" />\n"
"    <signal name=\"targetExecuted\" >\n"
"      <arg direction=\"out\" type=\"s\" name=\"point\" />\n"
"      <arg direction=\"out\" type=\"i\" name=\"timestamp\" />\n"
"      <arg direction=\"out\" type=\"b\" name=\"success\" />\n"
"      <arg direction=\"out\" type=\"s\" name=\"exception\" />\n"
"      <arg direction=\"out\" type=\"s\" name=\"data\" />\n"
"    </signal>\n"
"    <method name=\"actionAsXml\" >\n"
"      <arg direction=\"in\" type=\"s\" name=\"point\" />\n"
"      <arg direction=\"in\" type=\"as\" name=\"args\" />\n"
"      <arg direction=\"in\" type=\"i\" name=\"desiredRefreshMode\" />\n"
"      <arg direction=\"out\" type=\"s\" name=\"action\" />\n"
"    </method>\n"
"  </interface>\n"
        "")
public:
    ActionFactoryAdaptor(QObject *parent);
    virtual ~ActionFactoryAdaptor();

public: // PROPERTIES
    Q_PROPERTY(QStringList actionsListAsXml READ actionsListAsXml)
    QStringList actionsListAsXml() const;

    Q_PROPERTY(bool targetExecutionLogEnabled READ targetExecutionLogEnabled)
    bool targetExecutionLogEnabled() const;

public Q_SLOTS: // METHODS
    QString actionAsXml(const QString &point, const QStringList &args, int desiredRefreshMode);
Q_SIGNALS: // SIGNALS
    void targetExecuted(const QString &point, int timestamp, bool success, const QString &exception, const QString &data);
};

#endif
