//=============================================================================
//
// file :         LightTestClass.h
//
// description :  Include for the LightTestClass root class.
//                This class is the singleton class for
//                the LightTest device class.
//                It contains all properties and methods which the 
//                LightTest requires only once e.g. the commands.
//			
// project :      TANGO Device Server
//
// $Author: giacomo $
//
// $Revision: 1.2 $
// $Date: 2010-01-28 08:38:47 $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source: /home/cvsadm/cvsroot/utils/qtango/qtango/test/LightTestServer/LightTestClass.h,v $
// $Log: LightTestClass.h,v $
// Revision 1.2  2010-01-28 08:38:47  giacomo
// TPushButton intercetta dragLeaveEvent per chiamare setDown(false) durante il drag.
// TestLight ha qualche comando in piu`
//
// Revision 1.1  2009/12/07 08:32:28  giacomo
// LightTest server.
// read README
//
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#ifndef _LIGHTTESTCLASS_H
#define _LIGHTTESTCLASS_H

#include <tango.h>
#include <LightTest.h>


namespace LightTest_ns
{//=====================================
//	Define classes for attributes
//=====================================
class Short_scalarAttrib: public Tango::Attr
{
public:
	Short_scalarAttrib():Attr("Short_scalar", Tango::DEV_SHORT, Tango::READ_WRITE) {};
	~Short_scalarAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<LightTest *>(dev))->read_Short_scalar(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<LightTest *>(dev))->write_Short_scalar(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<LightTest *>(dev))->is_Short_scalar_allowed(ty);}
};

class Double_scalarAttrib: public Tango::Attr
{
public:
	Double_scalarAttrib():Attr("Double_scalar", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~Double_scalarAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<LightTest *>(dev))->read_Double_scalar(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<LightTest *>(dev))->write_Double_scalar(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<LightTest *>(dev))->is_Double_scalar_allowed(ty);}
};

//=========================================
//	Define classes for commands
//=========================================
class AValueClass : public Tango::Command
{
public:
	AValueClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AValueClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AValueClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<LightTest *>(dev))->is_AValue_allowed(any);}
};



class MultiplyByTenClass : public Tango::Command
{
public:
	MultiplyByTenClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	MultiplyByTenClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~MultiplyByTenClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<LightTest *>(dev))->is_MultiplyByTen_allowed(any);}
};



class OnClass : public Tango::Command
{
public:
	OnClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	OnClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~OnClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<LightTest *>(dev))->is_On_allowed(any);}
};



class OffCmd : public Tango::Command
{
public:
	OffCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	OffCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~OffCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<LightTest *>(dev))->is_Off_allowed(any);}
};



class SineWaveCmd : public Tango::Command
{
public:
	SineWaveCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SineWaveCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SineWaveCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<LightTest *>(dev))->is_SineWave_allowed(any);}
};



//
// The LightTestClass singleton definition
//

class
#ifdef WIN32
	__declspec(dllexport)
#endif
	LightTestClass : public Tango::DeviceClass
{
public:
//	properties member data

//	add your own data members here
//------------------------------------

public:
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static LightTestClass *init(const char *);
	static LightTestClass *instance();
	~LightTestClass();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);
	
protected:
	LightTestClass(string &);
	static LightTestClass *_instance;
	void command_factory();
	void get_class_property();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();
	string get_cvstag();
	string get_cvsroot();

private:
	void device_factory(const Tango::DevVarStringArray *);
};


}	//	namespace LightTest_ns

#endif // _LIGHTTESTCLASS_H
