//=============================================================================
//
// file :        LightTest.h
//
// description : Include for the LightTest class.
//
// project :	LightTest
//
// $Author: giacomo $
//
// $Revision: 1.2 $
// $Date: 2010-01-28 08:38:47 $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source: /home/cvsadm/cvsroot/utils/qtango/qtango/test/LightTestServer/LightTest.h,v $
// $Log: LightTest.h,v $
// Revision 1.2  2010-01-28 08:38:47  giacomo
// TPushButton intercetta dragLeaveEvent per chiamare setDown(false) durante il drag.
// TestLight ha qualche comando in piu`
//
// Revision 1.1  2009/12/07 08:32:28  giacomo
// LightTest server.
// read README
//
//
// copyleft :    European Synchrotron Radiation Facility
//               BP 220, Grenoble 38043
//               FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================
#ifndef _LIGHTTEST_H
#define _LIGHTTEST_H

#include <tango.h>
//using namespace Tango;

/**
 * @author	$Author: giacomo $
 * @version	$Revision: 1.2 $
 */

 //	Add your own constant definitions here.
 //-----------------------------------------------


namespace LightTest_ns
{

/**
 * Class Description:
 * A very lightweight tango test device, with a couple of attributes which
 *	return a random value whose module is less than their write value.
 *	If their write value is 0, then the value returned is between -255 and 255
 */

/*
 *	Device States Description:
*  Tango::ON :
*  Tango::OFF :
 */


class LightTest: public Tango::Device_4Impl
{
public :
	//	Add your own data members here
	//-----------------------------------------


	//	Here is the Start of the automatic code generation part
	//-------------------------------------------------------------	
/**
 *	@name attributes
 *	Attribute member data.
 */
//@{
		Tango::DevDouble	*attr_Double_scalar_read;
		Tango::DevDouble	attr_Double_scalar_write;
		Tango::DevShort	*attr_Short_scalar_read;
		Tango::DevShort	attr_Short_scalar_write;
//@}

/**
 * @name Device properties
 * Device properties member data.
 */
//@{
/**
 *	If this property contains the name of an attribute, that attribute will
 *	give a timeout when read.
 */
	string	timeout;
/**
 *	If the property contains the name of an attribute, that attribute will
 *	not be updated on read, generating an exception on the client.
 */
	string	doNotUpdate;
//@}

/**
 *	@name Device properties
 *	Device property member data.
 */
//@{
//@}

/**@name Constructors
 * Miscellaneous constructors */
//@{
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	LightTest(Tango::DeviceClass *cl,string &s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	LightTest(Tango::DeviceClass *cl,const char *s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device name
 *	@param d	Device description.
 */
	LightTest(Tango::DeviceClass *cl,const char *s,const char *d);
//@}

/**@name Destructor
 * Only one destructor is defined for this class */
//@{
/**
 * The object destructor.
 */	
	~LightTest() {delete_device();};
/**
 *	will be called at device destruction or at init command.
 */
	void delete_device();
//@}

	
/**@name Miscellaneous methods */
//@{
/**
 *	Initialize the device
 */
	virtual void init_device();
/**
 *	Always executed method before execution command method.
 */
	virtual void always_executed_hook();

//@}

/**
 * @name LightTest methods prototypes
 */

//@{
/**
 *	Hardware acquisition for attributes.
 */
	virtual void read_attr_hardware(vector<long> &attr_list);
/**
 *	Extract real attribute values for Double_scalar acquisition result.
 */
	virtual void read_Double_scalar(Tango::Attribute &attr);
/**
 *	Write Double_scalar attribute values to hardware.
 */
	virtual void write_Double_scalar(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for Short_scalar acquisition result.
 */
	virtual void read_Short_scalar(Tango::Attribute &attr);
/**
 *	Write Short_scalar attribute values to hardware.
 */
	virtual void write_Short_scalar(Tango::WAttribute &attr);
/**
 *	Read/Write allowed for Double_scalar attribute.
 */
	virtual bool is_Double_scalar_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for Short_scalar attribute.
 */
	virtual bool is_Short_scalar_allowed(Tango::AttReqType type);
/**
 *	Execution allowed for SineWave command.
 */
	virtual bool is_SineWave_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for Off command.
 */
	virtual bool is_Off_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for On command.
 */
	virtual bool is_On_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for MultiplyByTen command.
 */
	virtual bool is_MultiplyByTen_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for AValue command.
 */
	virtual bool is_AValue_allowed(const CORBA::Any &any);
/**
 * Given 2 parameters, the maximum amplitude value and the number of x points, this
 *	method returns the sine wave from 0 to max points. The amplitude varies randomly
 *	from 0 to the maximum amplitude value provided.
 *	@param	argin	0:max abs value of the sine wave amplitude. 1:number of points
 *	@return	The sine wave
 *	@exception DevFailed
 */
	Tango::DevVarDoubleArray	*sine_wave(const Tango::DevVarShortArray *);
/**
 * 
 *	@exception DevFailed
 */
	void	off();
/**
 * 
 *	@exception DevFailed
 */
	void	on();
/**
 * 
 *	@param	argin	Any double value
 *	@return	the argin multiplied by 10
 *	@exception DevFailed
 */
	Tango::DevDouble	multiply_by_ten(Tango::DevDouble);
/**
 * 
 *	@return	a random value
 *	@exception DevFailed
 */
	Tango::DevDouble	avalue();

/**
 *	Read the device properties from database
 */
	 void get_device_property();
//@}

	//	Here is the end of the automatic code generation part
	//-------------------------------------------------------------	



protected :	
	//	Add your own data members here
	//-----------------------------------------
};

}	// namespace_ns

#endif	// _LIGHTTEST_H
