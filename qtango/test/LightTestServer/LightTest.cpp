static const char *RcsId = "$Id: LightTest.cpp,v 1.2 2010-01-28 08:38:47 giacomo Exp $";
//+=============================================================================
//
// file :         LightTest.cpp
//
// description :  C++ source for the LightTest and its commands. 
//                The class is derived from Device. It represents the
//                CORBA servant object which will be accessed from the
//                network. All commands which can be executed on the
//                LightTest are implemented in this file.
//
// project :      TANGO Device Server
//
// $Author: giacomo $
//
// $Revision: 1.2 $
//
// $Revision: 1.2 $
// $Date: 2010-01-28 08:38:47 $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source: /home/cvsadm/cvsroot/utils/qtango/qtango/test/LightTestServer/LightTest.cpp,v $
// $Log: LightTest.cpp,v $
// Revision 1.2  2010-01-28 08:38:47  giacomo
// TPushButton intercetta dragLeaveEvent per chiamare setDown(false) durante il drag.
// TestLight ha qualche comando in piu`
//
// Revision 1.1  2009/12/07 08:32:28  giacomo
// LightTest server.
// read README
//
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================



//===================================================================
//
//	The following table gives the correspondence
//	between commands and method name.
//
//  Command name   |  Method name
//	----------------------------------------
//  State          |  dev_state()
//  Status         |  dev_status()
//  SineWave       |  sine_wave()
//  Off            |  off()
//  On             |  on()
//  MultiplyByTen  |  multiply_by_ten()
//  AValue         |  avalue()
//
//===================================================================


#include <tango.h>
#include <LightTest.h>
#include <LightTestClass.h>
#include <math.h>

using namespace Tango;

namespace LightTest_ns
{

//+----------------------------------------------------------------------------
//
// method : 		LightTest::LightTest(string &s)
// 
// description : 	constructor for simulated LightTest
//
// in : - cl : Pointer to the DeviceClass object
//      - s : Device name 
//
//-----------------------------------------------------------------------------
LightTest::LightTest(Tango::DeviceClass *cl,string &s)
:Tango::Device_4Impl(cl,s.c_str())
{
	init_device();
}

LightTest::LightTest(Tango::DeviceClass *cl,const char *s)
:Tango::Device_4Impl(cl,s)
{
	init_device();
}

LightTest::LightTest(Tango::DeviceClass *cl,const char *s,const char *d)
:Tango::Device_4Impl(cl,s,d)
{
	init_device();
}
//+----------------------------------------------------------------------------
//
// method : 		LightTest::delete_device()
// 
// description : 	will be called at device destruction or at init command.
//
//-----------------------------------------------------------------------------
void LightTest::delete_device()
{
	//	Delete device allocated objects
	delete attr_Double_scalar_read;
	delete attr_Short_scalar_read;
}

//+----------------------------------------------------------------------------
//
// method : 		LightTest::init_device()
// 
// description : 	will be called at device initialization.
//
//-----------------------------------------------------------------------------
void LightTest::init_device()
{
	INFO_STREAM << "LightTest::LightTest() create device " << device_name << endl;

	// Initialise variables to default values
	//--------------------------------------------
	get_device_property();
	attr_Double_scalar_read = new DevDouble;
	attr_Short_scalar_read = new DevShort;
	attr_Double_scalar_write = 255;
	attr_Short_scalar_write = 255;
}


//+----------------------------------------------------------------------------
//
// method : 		LightTest::get_device_property()
// 
// description : 	Read the device properties from database.
//
//-----------------------------------------------------------------------------
void LightTest::get_device_property()
{
	//	Initialize your default values here (if not done with  POGO).
	//------------------------------------------------------------------

	//	Read device properties from database.(Automatic code generation)
	//------------------------------------------------------------------
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("Timeout"));
	dev_prop.push_back(Tango::DbDatum("DoNotUpdate"));

	//	Call database and extract values
	//--------------------------------------------
	if (Tango::Util::instance()->_UseDb==true)
		get_db_device()->get_property(dev_prop);
	Tango::DbDatum	def_prop, cl_prop;
	LightTestClass	*ds_class =
		(static_cast<LightTestClass *>(get_device_class()));
	int	i = -1;

	//	Try to initialize Timeout from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  timeout;
	else {
		//	Try to initialize Timeout from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  timeout;
	}
	//	And try to extract Timeout value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  timeout;

	//	Try to initialize DoNotUpdate from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  doNotUpdate;
	else {
		//	Try to initialize DoNotUpdate from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  doNotUpdate;
	}
	//	And try to extract DoNotUpdate value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  doNotUpdate;



	//	End of Automatic code generation
	//------------------------------------------------------------------

}
//+----------------------------------------------------------------------------
//
// method : 		LightTest::always_executed_hook()
// 
// description : 	method always executed before any command is executed
//
//-----------------------------------------------------------------------------
void LightTest::always_executed_hook()
{
	
}
//+----------------------------------------------------------------------------
//
// method : 		LightTest::read_attr_hardware
// 
// description : 	Hardware acquisition for attributes.
//
//-----------------------------------------------------------------------------
void LightTest::read_attr_hardware(vector<long> &attr_list)
{
	DEBUG_STREAM << "LightTest::read_attr_hardware(vector<long> &attr_list) entering... "<< endl;
	//	Add your own code here
}

//+----------------------------------------------------------------------------
//
// method : 		LightTest::read_Double_scalar
// 
// description : 	Extract real attribute values for Double_scalar acquisition result.
//
//-----------------------------------------------------------------------------
void LightTest::read_Double_scalar(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LightTest::read_Double_scalar(Tango::Attribute &attr) entering... "<< endl;
	*attr_Double_scalar_read = (double) rand()/(double) RAND_MAX * (double) attr_Double_scalar_write;
	if(doNotUpdate == attr.get_name())
	  return;
	else if(timeout == attr.get_name())
	  sleep(5); /* generate a timeout */
    attr.set_value(attr_Double_scalar_read);
}

//+----------------------------------------------------------------------------
//
// method : 		LightTest::write_Double_scalar
// 
// description : 	Write Double_scalar attribute values to hardware.
//
//-----------------------------------------------------------------------------
void LightTest::write_Double_scalar(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LightTest::write_Double_scalar(Tango::WAttribute &attr) entering... "<< endl;
	attr.get_write_value(attr_Double_scalar_write);
}

//+----------------------------------------------------------------------------
//
// method : 		LightTest::read_Short_scalar
// 
// description : 	Extract real attribute values for Short_scalar acquisition result.
//
//-----------------------------------------------------------------------------
void LightTest::read_Short_scalar(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LightTest::read_Short_scalar(Tango::Attribute &attr) entering... "<< endl;
	if(doNotUpdate == attr.get_name())
	  return;
	else if(timeout == attr.get_name())
	  sleep(5); /* generate a timeout */
	*attr_Short_scalar_read = (double) rand()/(double) RAND_MAX * (double) attr_Short_scalar_write;
    attr.set_value(attr_Short_scalar_read);
}

//+----------------------------------------------------------------------------
//
// method : 		LightTest::write_Short_scalar
// 
// description : 	Write Short_scalar attribute values to hardware.
//
//-----------------------------------------------------------------------------
void LightTest::write_Short_scalar(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LightTest::write_Short_scalar(Tango::WAttribute &attr) entering... "<< endl;
	attr.get_write_value(attr_Short_scalar_write);
}

//+------------------------------------------------------------------
/**
 *	method:	LightTest::sine_wave
 *
 *	description:	method to execute "SineWave"
 *	Given 2 parameters, the maximum amplitude value and the number of x points, this
 *	method returns the sine wave from 0 to max points. The amplitude varies randomly
 *	from 0 to the maximum amplitude value provided.
 *
 * @param	argin	0:max abs value of the sine wave amplitude. 1:number of points
 * @return	The sine wave
 *
 */
//+------------------------------------------------------------------
Tango::DevVarDoubleArray *LightTest::sine_wave(const Tango::DevVarShortArray *argin)
{
	//	POGO has generated a method core with argout allocation.
	//	If you would like to use a static reference without copying,
	//	See "TANGO Device Server Programmer's Manual"
	//		(chapter : Writing a TANGO DS / Exchanging data)
	//------------------------------------------------------------
	Tango::DevVarDoubleArray	*argout  = new Tango::DevVarDoubleArray();
	argout->length(1);
	(*argout)[0] = 0.0;
	DEBUG_STREAM << "LightTest::sin(): entering... !" << endl;

	//	Add your own code to control device here
	if(argin->length() == 2)
	{
	  argout->length((*argin)[1]);
	  double amplitude = (double) rand()/(double) RAND_MAX * (double) (*argin)[0];
	  for(int i = 0; i < (*argin)[1]; i++)
		(*argout)[i] = amplitude * sin(i);
	  return argout;
	}
}


//+------------------------------------------------------------------
/**
 *	method:	LightTest::off
 *
 *	description:	method to execute "Off"
 *
 *
 */
//+------------------------------------------------------------------
void LightTest::off()
{
	DEBUG_STREAM << "LightTest::off(): entering... !" << endl;

	//	Add your own code to control device here
	set_state(Tango::OFF);
	set_status("The device is in off state");
}

//+------------------------------------------------------------------
/**
 *	method:	LightTest::on
 *
 *	description:	method to execute "On"
 *
 *
 */
//+------------------------------------------------------------------
void LightTest::on()
{
	DEBUG_STREAM << "LightTest::on(): entering... !" << endl;

	//	Add your own code to control device here
	set_state(Tango::ON);
	set_status("The device is in on state");

}

//+------------------------------------------------------------------
/**
 *	method:	LightTest::multiply_by_ten
 *
 *	description:	method to execute "MultiplyByTen"
 *
 * @param	argin	Any double value
 * @return	the argin multiplied by 10
 *
 */
//+------------------------------------------------------------------
Tango::DevDouble LightTest::multiply_by_ten(Tango::DevDouble argin)
{
	Tango::DevDouble	argout ;
	DEBUG_STREAM << "LightTest::multiply_by_ten(): entering... !" << endl;

	//	Add your own code to control device here
	argout = 10 * argin;
	return argout;
}

//+------------------------------------------------------------------
/**
 *	method:	LightTest::avalue
 *
 *	description:	method to execute "AValue"
 *
 * @return	a random value
 *
 */
//+------------------------------------------------------------------
Tango::DevDouble LightTest::avalue()
{
	Tango::DevDouble	argout ;
	DEBUG_STREAM << "LightTest::avalue(): entering... !" << endl;

	//	Add your own code to control device here
	argout = (double) rand()/(double) RAND_MAX * (double) 1000.0;
	return argout;
}

}	//	namespace
