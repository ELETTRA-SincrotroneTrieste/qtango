static const char *RcsId = "$Id $";
//+=============================================================================
//
// file :         LightTestStateMachine.cpp
//
// description :  C++ source for the LightTest and its alowed 
//                methods for commands and attributes
//
// project :      TANGO Device Server
//
// $Author: giacomo $
//
// $Revision: 1.2 $
// $Date: 2010-01-28 08:38:47 $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source: /home/cvsadm/cvsroot/utils/qtango/qtango/test/LightTestServer/LightTestStateMachine.cpp,v $
// $Log: LightTestStateMachine.cpp,v $
// Revision 1.2  2010-01-28 08:38:47  giacomo
// TPushButton intercetta dragLeaveEvent per chiamare setDown(false) durante il drag.
// TestLight ha qualche comando in piu`
//
// Revision 1.1  2009/12/07 08:32:28  giacomo
// LightTest server.
// read README
//
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#include <tango.h>
#include <LightTest.h>
#include <LightTestClass.h>

/*====================================================================
 *	This file contains the methods to allow commands and attributes
 * read or write execution.
 *
 * If you wand to add your own code, add it between 
 * the "End/Re-Start of Generated Code" comments.
 *
 * If you want, you can also add your own methods.
 *====================================================================
 */

namespace LightTest_ns
{

//=================================================
//		Attributes Allowed Methods
//=================================================

//+----------------------------------------------------------------------------
//
// method : 		LightTest::is_Double_scalar_allowed
// 
// description : 	Read/Write allowed for Double_scalar attribute.
//
//-----------------------------------------------------------------------------
bool LightTest::is_Double_scalar_allowed(Tango::AttReqType type)
{
	if (get_state() == Tango::OFF)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		LightTest::is_Short_scalar_allowed
// 
// description : 	Read/Write allowed for Short_scalar attribute.
//
//-----------------------------------------------------------------------------
bool LightTest::is_Short_scalar_allowed(Tango::AttReqType type)
{
	if (get_state() == Tango::OFF)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}

//=================================================
//		Commands Allowed Methods
//=================================================

//+----------------------------------------------------------------------------
//
// method : 		LightTest::is_SineWave_allowed
// 
// description : 	Execution allowed for SineWave command.
//
//-----------------------------------------------------------------------------
bool LightTest::is_SineWave_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::OFF)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		LightTest::is_Off_allowed
// 
// description : 	Execution allowed for Off command.
//
//-----------------------------------------------------------------------------
bool LightTest::is_Off_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::OFF)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		LightTest::is_On_allowed
// 
// description : 	Execution allowed for On command.
//
//-----------------------------------------------------------------------------
bool LightTest::is_On_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::ON)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		LightTest::is_MultiplyByTen_allowed
// 
// description : 	Execution allowed for MultiplyByTen command.
//
//-----------------------------------------------------------------------------
bool LightTest::is_MultiplyByTen_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::OFF)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		LightTest::is_AValue_allowed
// 
// description : 	Execution allowed for AValue command.
//
//-----------------------------------------------------------------------------
bool LightTest::is_AValue_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::OFF)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}

}	// namespace LightTest_ns
